const mongoose = require('mongoose');
const Schema = mongoose.Schema;

/**
 * Experiment Schema
 * Represents an experiment in the Nick the Great system
 */
const ExperimentSchema = new Schema({
  // Use the experiment ID generated by Agent Core as the MongoDB _id
  _id: {
    type: String,
    required: true
  },
  // User who created the experiment
  userId: {
    type: String,
    required: true,
    index: true
  },
  // Basic experiment information
  name: {
    type: String,
    required: true,
    trim: true
  },
  description: {
    type: String,
    default: ''
  },
  // Task/Experiment type (maps to AgentTaskType enum in proto)
  type: {
    type: String,
    required: true,
    enum: ['FREELANCE_WRITING', 'NICHE_AFFILIATE_WEBSITE', 'AI_DRIVEN_EBOOKS', 'PINTEREST_STRATEGY'],
    index: true
  },
  // Current state (maps to ExperimentState enum in proto)
  state: {
    type: String,
    required: true,
    enum: ['STATE_UNSPECIFIED', 'STATE_DEFINED', 'STATE_RUNNING', 'STATE_PAUSED', 'STATE_COMPLETED', 'STATE_FAILED', 'STATE_STOPPED'],
    default: 'STATE_DEFINED',
    index: true
  },
  // Current status message
  statusMessage: {
    type: String,
    default: 'Experiment defined'
  },
  // Experiment parameters (specific to experiment type)
  parameters: {
    type: Schema.Types.Mixed,
    default: {}
  },
  // Experiment metrics
  metrics: {
    type: Schema.Types.Mixed,
    default: {}
  },
  // Timestamps
  startTime: {
    type: Date,
    default: null
  },
  lastUpdateTime: {
    type: Date,
    default: Date.now
  },
  estimatedCompletionTime: {
    type: Date,
    default: null
  },
  // Results of the experiment
  results: {
    type: Schema.Types.Mixed,
    default: null
  },
  // System fields
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
}, {
  timestamps: true // Automatically manage createdAt and updatedAt
});

// Add indexes for common queries
ExperimentSchema.index({ userId: 1, type: 1 });
ExperimentSchema.index({ userId: 1, state: 1 });
ExperimentSchema.index({ createdAt: -1 });
ExperimentSchema.index({ lastUpdateTime: -1 });

// Pre-save middleware to update the updatedAt field
ExperimentSchema.pre('save', function(next) {
  this.updatedAt = Date.now();
  next();
});

/**
 * Convert MongoDB document to gRPC ExperimentStatus message format
 * @returns {Object} Object formatted for gRPC ExperimentStatus
 */
ExperimentSchema.methods.toGrpcFormat = function() {
  return {
    id: { id: this._id },
    name: this.name,
    type: this.type,
    state: this.state,
    status_message: this.statusMessage,
    metrics: this.metrics,
    start_time: this.startTime ? { seconds: Math.floor(this.startTime.getTime() / 1000) } : null,
    last_update_time: { seconds: Math.floor(this.lastUpdateTime.getTime() / 1000) },
    estimated_completion_time: this.estimatedCompletionTime ? 
      { seconds: Math.floor(this.estimatedCompletionTime.getTime() / 1000) } : null
  };
};

/**
 * Update experiment from gRPC ExperimentStatus message
 * @param {Object} status - gRPC ExperimentStatus message
 */
ExperimentSchema.methods.updateFromGrpc = function(status) {
  this.name = status.name;
  this.type = status.type;
  this.state = status.state;
  this.statusMessage = status.status_message;
  this.metrics = status.metrics;
  
  if (status.start_time) {
    this.startTime = new Date(status.start_time.seconds * 1000);
  }
  
  this.lastUpdateTime = new Date(status.last_update_time.seconds * 1000);
  
  if (status.estimated_completion_time) {
    this.estimatedCompletionTime = new Date(status.estimated_completion_time.seconds * 1000);
  }
  
  return this;
};

// Create and export the model
const Experiment = mongoose.model('Experiment', ExperimentSchema);
module.exports = Experiment;
