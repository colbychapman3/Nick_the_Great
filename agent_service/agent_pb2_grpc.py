# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import agent_pb2 as agent__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in agent_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AgentServiceStub(object):
    """===================================================================
    Agent Service Definition
    ===================================================================

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateExperiment = channel.unary_unary(
                '/nickthegreat.AgentService/CreateExperiment',
                request_serializer=agent__pb2.CreateExperimentRequest.SerializeToString,
                response_deserializer=agent__pb2.CreateExperimentResponse.FromString,
                _registered_method=True)
        self.StartExperiment = channel.unary_unary(
                '/nickthegreat.AgentService/StartExperiment',
                request_serializer=agent__pb2.StartExperimentRequest.SerializeToString,
                response_deserializer=agent__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.StopExperiment = channel.unary_unary(
                '/nickthegreat.AgentService/StopExperiment',
                request_serializer=agent__pb2.StopExperimentRequest.SerializeToString,
                response_deserializer=agent__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.GetExperimentStatus = channel.unary_unary(
                '/nickthegreat.AgentService/GetExperimentStatus',
                request_serializer=agent__pb2.GetExperimentStatusRequest.SerializeToString,
                response_deserializer=agent__pb2.ExperimentStatus.FromString,
                _registered_method=True)
        self.GetAgentStatus = channel.unary_unary(
                '/nickthegreat.AgentService/GetAgentStatus',
                request_serializer=agent__pb2.GetAgentStatusRequest.SerializeToString,
                response_deserializer=agent__pb2.AgentStatus.FromString,
                _registered_method=True)
        self.GetLogs = channel.unary_stream(
                '/nickthegreat.AgentService/GetLogs',
                request_serializer=agent__pb2.GetLogsRequest.SerializeToString,
                response_deserializer=agent__pb2.LogEntry.FromString,
                _registered_method=True)
        self.ApproveDecision = channel.unary_unary(
                '/nickthegreat.AgentService/ApproveDecision',
                request_serializer=agent__pb2.ApproveDecisionRequest.SerializeToString,
                response_deserializer=agent__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.StopAgent = channel.unary_unary(
                '/nickthegreat.AgentService/StopAgent',
                request_serializer=agent__pb2.StopAgentRequest.SerializeToString,
                response_deserializer=agent__pb2.StatusResponse.FromString,
                _registered_method=True)


class AgentServiceServicer(object):
    """===================================================================
    Agent Service Definition
    ===================================================================

    """

    def CreateExperiment(self, request, context):
        """Creates a new experiment based on the provided definition
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartExperiment(self, request, context):
        """Starts a previously defined experiment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopExperiment(self, request, context):
        """Stops a running or paused experiment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExperimentStatus(self, request, context):
        """Retrieves the current status of a specific experiment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAgentStatus(self, request, context):
        """Retrieves the overall status of the agent
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLogs(self, request, context):
        """Streams log entries from the agent
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApproveDecision(self, request, context):
        """Allows a human collaborator to approve or reject a pending agent decision
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopAgent(self, request, context):
        """Immediately stops all agent activities (kill switch)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateExperiment,
                    request_deserializer=agent__pb2.CreateExperimentRequest.FromString,
                    response_serializer=agent__pb2.CreateExperimentResponse.SerializeToString,
            ),
            'StartExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.StartExperiment,
                    request_deserializer=agent__pb2.StartExperimentRequest.FromString,
                    response_serializer=agent__pb2.StatusResponse.SerializeToString,
            ),
            'StopExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.StopExperiment,
                    request_deserializer=agent__pb2.StopExperimentRequest.FromString,
                    response_serializer=agent__pb2.StatusResponse.SerializeToString,
            ),
            'GetExperimentStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExperimentStatus,
                    request_deserializer=agent__pb2.GetExperimentStatusRequest.FromString,
                    response_serializer=agent__pb2.ExperimentStatus.SerializeToString,
            ),
            'GetAgentStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAgentStatus,
                    request_deserializer=agent__pb2.GetAgentStatusRequest.FromString,
                    response_serializer=agent__pb2.AgentStatus.SerializeToString,
            ),
            'GetLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.GetLogs,
                    request_deserializer=agent__pb2.GetLogsRequest.FromString,
                    response_serializer=agent__pb2.LogEntry.SerializeToString,
            ),
            'ApproveDecision': grpc.unary_unary_rpc_method_handler(
                    servicer.ApproveDecision,
                    request_deserializer=agent__pb2.ApproveDecisionRequest.FromString,
                    response_serializer=agent__pb2.StatusResponse.SerializeToString,
            ),
            'StopAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.StopAgent,
                    request_deserializer=agent__pb2.StopAgentRequest.FromString,
                    response_serializer=agent__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nickthegreat.AgentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('nickthegreat.AgentService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AgentService(object):
    """===================================================================
    Agent Service Definition
    ===================================================================

    """

    @staticmethod
    def CreateExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nickthegreat.AgentService/CreateExperiment',
            agent__pb2.CreateExperimentRequest.SerializeToString,
            agent__pb2.CreateExperimentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nickthegreat.AgentService/StartExperiment',
            agent__pb2.StartExperimentRequest.SerializeToString,
            agent__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nickthegreat.AgentService/StopExperiment',
            agent__pb2.StopExperimentRequest.SerializeToString,
            agent__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetExperimentStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nickthegreat.AgentService/GetExperimentStatus',
            agent__pb2.GetExperimentStatusRequest.SerializeToString,
            agent__pb2.ExperimentStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAgentStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nickthegreat.AgentService/GetAgentStatus',
            agent__pb2.GetAgentStatusRequest.SerializeToString,
            agent__pb2.AgentStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/nickthegreat.AgentService/GetLogs',
            agent__pb2.GetLogsRequest.SerializeToString,
            agent__pb2.LogEntry.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ApproveDecision(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nickthegreat.AgentService/ApproveDecision',
            agent__pb2.ApproveDecisionRequest.SerializeToString,
            agent__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nickthegreat.AgentService/StopAgent',
            agent__pb2.StopAgentRequest.SerializeToString,
            agent__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
